Comandos de Git:
-git init: cria um repositório vazio no diretório atual
-git add: adiciona um arquivo ao repositório ("git add ." adiciona todos os arquivos do diretório ao repositório)
-git commit: confirma mudanças realizadas ao repositório (é necessário adicionar uma mensagem de commit sempre que utilizado. Isto auxilia na manutenção do histórico de commits)
-git config: configura os dados do usuário do repositório (uso: git config --global user. name "nome do usuário" // git config --global user.email "e-mail da conta GitHub")
-git log: mostra o histórico de commits do repositório, bem como as mensagens de cada commit
-git status: mostra o status do repositório (se há, ou não, mudanças a terem seus commits realizados, ou se há conflitos entre o repositório na máquina e no GitHub)
-git remote: cria o repositório remoto no GitHub (uso: crie um repositório no GitHub, depois siga as instruções de uso do GitHub)
-git push: envia arquivo para o arquivo para o repositório remoto
-git pull: faz o download de arquivo do repositório remoto para o repositório local (no PC)
-git clone: baixa todo o repositório remoto para o diretório do PC
-git branch: cria uma "branch" (lista de commits) no repositório local (uso: git branch "nome da nova ramificação")
-git checkout: muda o status da branch, ou altera a branch em que o usuário está trabalhando (uso: git checkpout "nome da branch")
-git merge: adiciona commits de uma branch na branch atual (uso: git merge "nome da ramificação a ser mescalda com a ramificação atual de trabalho")
-git rebase: semelhante ao git merge, porém prioriza os commits da ramificação a ser mesclada com a atual. Após mesclar as ramificações, os commits realizados na ramificação atual antes do comando "rebase" terão seus commits realizados (diferentemente do "merge", o "rebase" não gera um commit para si)
-git fetch: baixa o repositório remoto para o PC, mas não altera o repositório local (não realiza o merge)
-get tag: adiciona um "lembrete" a um commit (uso: git tag "mensagem" -> git push "tag")
-git stash: salva o estado atual do diretório sem alterar o status (git stash list: mostra a lista de arquivos salvos no stash; git stash pop: retorna o estado do diretório pré-stash)
-git cherry-pick: aplica as alterações de um commit na ramificação atual (git cherrypick "commit")
-git blame: mostra alterações feitas em um arquivo por linha (git blame "nome do arquivo").
-git bisect: realiza uma busca binária em cada commit para encontrar alterações (git bisect start (inicia a busca), git bisect bad (denucia o commit indesejado), git bisect good (indica o commit desejado), git bisect reset (restaura o estado para o commit desejado))




Ordem de comandos para sincronizar repositórios local e remoto: 
git add -> git commit -> git push 